{"version":3,"sources":["src/calculate-functions.js"],"names":["countSegments","data","program","reduce","acc","itinerary","mileage","value","totals","find","item","code","id","rdm","getmqd","qd","calculateAMExecutivebonus","miles","countAMDLMiles","segments","includes","carrier","calculateSegments","filter","segment","airlines","map","x","iatacode","length","countMiles","qm","calculateAZExecutivebonus","calculateLHMSegements","calculateLHMExecutivebonus","calcLHM2021","calculateS7SegmentsWeight","bookingClass","calculateSKSegments","calculateSQExecutivebonus","countSUBusinessSegments","cabquery","countSVSegments","airports","origin","country_code","destination","calculateTGSegments","calculateUXMiles","ticketer","multiplier","price","calculateVNExecutivebonus"],"mappings":"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","sourceRoot":"/source_map/","sourcesContent":["export default {\n    countSegments: ({ data, program }) =>\n        data.reduce((acc, itinerary) => {\n            let mileage = itinerary.value?.totals?.find(\n                (item) => program.code === item.id\n            );\n            if (!mileage) {\n                return acc;\n            }\n            if (mileage.rdm) {\n                return 0 < mileage.rdm[0] ? acc + 1 : acc;\n            } else {\n                return acc;\n            }\n        }, 0),\n\n    getmqd: ({ data, program }) =>\n        data.reduce(\n            (acc, itinerary) => {\n                let mileage = itinerary.value?.totals?.find(\n                    (item) => program.code === item.id\n                );\n                if (!mileage) {\n                    return [acc[0], acc[1] + 1];\n                }\n                return 0 < mileage.qd[0]\n                    ? [acc[0] + mileage.qd[0], acc[1] + 1]\n                    : [acc[0], acc[1] + 1];\n            },\n            [0, 0]\n        )[0],\n\n    calculateAMExecutivebonus: ({ data }) =>\n        data.reduce((miles, itinerary) => {\n            let item = itinerary.value.totals.find((item) => \"AM\" === item.id);\n            if (!item) {\n                return miles;\n            }\n            if (50000 < miles) return miles + item.rdm[1];\n            else if (80000 < miles) return miles + item.rdm[2];\n            else if (100000 < miles) return miles + item.rdm[3];\n            else return miles + item.rdm[0];\n        }, 0),\n\n    countAMDLMiles: ({ data, segments }) =>\n        data.reduce(\n            (acc, itinerary) => {\n                let mileage = itinerary.value?.totals?.find((item) => \"AM\" === item.id);\n                if (!mileage) {\n                    return [acc[0], acc[1] + 1];\n                }\n                if ([\"AM\", \"DL\"].includes(segments[acc[1]].carrier)) {\n                    if (50000 > acc[0]) return [acc[0] + mileage.rdm[0], acc[1] + 1];\n                    if (80000 > acc[0]) return [acc[0] + mileage.rdm[1], acc[1] + 1];\n                    if (100000 > acc[0]) return [acc[0] + mileage.rdm[2], acc[1] + 1];\n                    if (100000 < acc[0]) return [acc[0] + mileage.rdm[3], acc[1] + 1];\n                } else {\n                    return [acc[0], acc[1] + 1];\n                }\n            },\n            [0, 0]\n        )[0],\n\n    calculateSegments: ({ segments, program }) =>\n        segments.filter((segment) =>\n            program.airlines.map((x) => x.iatacode).includes(segment.carrier)\n        ).length,\n\n    countMiles: ({ data, program, segments }) =>\n        data.reduce(\n            (acc, itinerary) => {\n                let mileage = itinerary.value?.totals?.find(\n                    (item) => program.code === item.id\n                );\n                if (!mileage) {\n                    return [acc[0], acc[1] + 1];\n                }\n                if ([program.code].includes(segments[acc[1]].carrier)) {\n                    return [acc[0] + mileage.qm[0], acc[1] + 1];\n                } else {\n                    return [acc[0], acc[1] + 1];\n                }\n            },\n            [0, 0]\n        )[0],\n\n    calculateAZExecutivebonus: ({ data }) =>\n        data.reduce((miles, itinerary) => {\n            let item = itinerary.value.totals.find((item) => \"AZ\" === item.id);\n            if (!item) {\n                return miles;\n            }\n            if (20000 < miles) {\n                return miles + item.rdm[1];\n            } else if (50000 < miles) {\n                return miles + item.rdm[2];\n            } else if (80000 < miles) {\n                return miles + item.rdm[3];\n            } else {\n                return miles + item.rdm[0];\n            }\n        }, 0),\n\n    calculateLHMSegements: ({ segments }) =>\n        segments.filter((segment) =>\n            [\"EN\", \"OS\", \"SN\", \"OU\", \"EW\", \"LO\", \"LH\", \"LG\", \"LX\"].includes(\n                segment.carrier\n            )\n        ).length,\n\n    calculateLHMExecutivebonus: ({ data }) => {\n        // If >35000 miles, take Executive Bonus\n        return data.reduce((miles, itinerary) => {\n            let item = itinerary.value.totals.find((item) => \"LHM\" === item.id);\n            if (!item) {\n                return miles;\n            }\n            return 35000 < miles ? miles + item.qm[1] : miles + item.qm[0];\n        }, 0);\n    },\n    calcLHM2021: ({ data, segments }) =>\n        data.reduce(\n            (acc, itinerary) => {\n                let mileage = itinerary.value?.totals?.find(\n                    (item) => \"LHM\" === item.id\n                );\n                if (!mileage) {\n                    return [acc[0], acc[1] + 1];\n                }\n                if (\n                    [\"EN\", \"OS\", \"SN\", \"OU\", \"EW\", \"LO\", \"LH\", \"LG\", \"LX\", \"WK\"].includes(\n                        segments[acc[1]].carrier\n                    )\n                ) {\n                    return acc[0] > 35000\n                        ? [acc[0] + mileage.qm[1] * 2, acc[1] + 1]\n                        : [acc[0] + mileage.qm[0] * 2, acc[1] + 1];\n                } else {\n                    return acc[0] > 35000\n                        ? [acc[0] + mileage.qm[1], acc[1] + 1]\n                        : [acc[0] + mileage.qm[0], acc[1] + 1];\n                }\n            },\n            [0, 0]\n        )[0],\n\n    calculateS7SegmentsWeight: ({ data, segments }) =>\n        data.reduce(\n            (acc, itinerary) => {\n                let mileage = itinerary.value?.totals?.find((item) => \"S7\" === item.id);\n                if (!mileage) {\n                    return [acc[0], acc[1] + 1];\n                }\n                if ([\"S7\"].includes(segments[acc[1]].carrier)) {\n                    if ([\"J\", \"C\", \"D\"].includes(segments[acc[1]].bookingClass)) {\n                        return [acc[0] + 2, acc[1] + 1];\n                    } else {\n                        return [acc[0] + 1, acc[1] + 1];\n                    }\n                } else {\n                    return [acc[0], acc[1] + 1];\n                }\n            },\n            [0, 0]\n        )[0],\n\n    calculateSKSegments: ({ segments }) =>\n        segments.filter((segment) => [\"SK\", \"WF\"].includes(segment.carrier)).length,\n\n    calculateSQExecutivebonus: ({ data }) => {\n        // If >25000 miles, take Executive Bonus\n        return data.reduce((miles, itinerary) => {\n            let item = itinerary.value.totals.find((item) => \"SQ\" === item.id);\n            if (!item) {\n                return miles;\n            }\n            return 25000 < miles ? miles + item.rdm[1] : miles + item.rdm[0];\n        }, 0);\n    },\n\n    countSUBusinessSegments: ({ data }) =>\n        data.reduce((acc, itinerary) => {\n            let mileage = itinerary.value?.totals?.find((item) => \"SU\" === item.id);\n            if (!mileage) {\n                return acc;\n            }\n            let cabquery = itinerary.value?.totals?.find((item) => \"SU\" === item.id);\n            if (cabquery[\"cabinclass\"] == \"Business Class\") {\n                return 0 < mileage.rdm[0] ? acc + 1 : acc;\n            }\n            return acc;\n        }, 0),\n\n    countSVSegments: ({ data, program, segments }) =>\n        data.reduce(\n            (acc, itinerary) => {\n                let mileage = itinerary.value?.totals?.find(\n                    (item) => program === item.id\n                );\n                if (!mileage) {\n                    return [acc[0], acc[1] + 1];\n                }\n                if (\n                    airports[segments[acc[1]].origin].country_code !=\n                    airports[segments[acc[1]].destination].country_code\n                ) {\n                    return 0 < mileage.rdm[0]\n                        ? [acc[0] + 1, acc[1] + 1]\n                        : [acc[0], acc[1] + 1];\n                }\n                return [acc[0], acc[1] + 1];\n            },\n            [0, 0]\n        )[0],\n\n    calculateTGSegments: ({ segments }) =>\n        segments\n            .filter((segment) => [\"TG\"].includes(segment.carrier))\n            .filter((segment) => ![\"G\", \"V\", \"W\"].includes(segment.bookingClass))\n            .length,\n\n    calculateUXMiles: ({ data, program, segments, airports }) =>\n        data.reduce(\n            (acc, itinerary) => {\n                let mileage = itinerary.value?.totals?.find(\n                    (item) => program === item.id\n                );\n                if (!mileage) {\n                    return [acc[0], acc[1] + 1];\n                }\n                if (segments[acc[1]].carrier && segments[acc[1]].ticketer) {\n                    if (\n                        [program].includes(segments[acc[1]].carrier) ||\n                        [program].includes(segments[acc[1]].ticketer)\n                    ) {\n                        let multiplier = 5;\n                        if ([\"C\", \"J\", \"D\", \"I\"].includes(segments[acc[1]].bookingClass)) {\n                            multiplier += 3;\n                        }\n                        if (\n                            airports[segments[acc[1]].origin].country_code == \"US\" ||\n                            airports[segments[acc[1]].destination].country_code == \"US\"\n                        ) {\n                            multiplier += 1;\n                        }\n                        if (18000 > acc[0])\n                            return [acc[0] + segments[acc[1]].price * multiplier, acc[1] + 1];\n                        if (32000 > acc[0])\n                            return [\n                                acc[0] + segments[acc[1]].price * multiplier * 1.5,\n                                acc[1] + 1,\n                            ];\n                        if (60000 > acc[0])\n                            return [\n                                acc[0] + segments[acc[1]].price * multiplier * 1.75,\n                                acc[1] + 1,\n                            ];\n                        if (60000 < acc[0])\n                            return [\n                                acc[0] + segments[acc[1]].price * multiplier * 2,\n                                acc[1] + 1,\n                            ];\n                    }\n                    return [acc[0] + mileage.rdm[0], acc[1] + 1];\n                } else {\n                    return [acc[0] + mileage.rdm[0], acc[1] + 1];\n                }\n            },\n            [0, 0]\n        )[0],\n\n    calculateVNExecutivebonus: ({ data }) =>\n        data.reduce((miles, itinerary) => {\n            let item = itinerary.value.totals.find((item) => \"VN\" === item.id);\n            if (!item) {\n                return miles;\n            }\n            if (15000 < miles) {\n                return miles + item.rdm[1];\n            } else if (30000 < miles) {\n                return miles + item.rdm[2];\n            } else if (50000 < miles) {\n                return miles + item.rdm[3];\n            } else {\n                return miles + item.rdm[0];\n            }\n        }, 0),\n};\n"]}