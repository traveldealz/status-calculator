{"version":3,"sources":["src/programs/UA.js"],"names":["calculateSegments","segments","data","reduce","acc","itinerary","mileage","value","totals","find","item","id","rdm","name","alliance","qualificationPeriodType","status","allianceStatus","qualification","type","number","milesName","en","de","qualificationPeriod","validity","secType","secNumber","secCalculate","secmilesName","secNote","es","note"],"mappings":"AAAA,SAASA,iBAAT,CAA4BC,QAA5B,EAAsCC,IAAtC,EAA6C;AACzC,SAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,GAAD,EAAKC,SAAL,KAAmB;AAClC,QAAIC,OAAO,GAAGD,SAAS,CAACE,KAAV,EAAiBC,MAAjB,EAAyBC,IAAzB,CAA8BC,IAAI,IAAI,SAASA,IAAI,CAACC,EAApD,CAAd;;AACA,QAAG,CAACL,OAAJ,EAAa;AACT,aAAOF,GAAP;AACH;;AACD,QAAGE,OAAO,CAACK,EAAR,IAAc,IAAjB,EAAsB;AAAC,aAAOP,GAAG,GAAC,CAAX;AAAa;;AAAA;AACpC,WAAO,IAAIE,OAAO,CAACM,GAAR,CAAY,CAAZ,CAAJ,GAAqBR,GAAG,GAAC,CAAzB,GAA6BA,GAApC;AACH,GAPM,EAOJ,CAPI,CAAP;AAQH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sourceRoot":"/source_map/","sourcesContent":["function calculateSegments( segments, data ) {\n    return data.reduce((acc,itinerary) => {\n        let mileage = itinerary.value?.totals?.find(item => 'UA' === item.id);\n        if(!mileage) {\n            return acc;\n        }\n        if(mileage.id == 'UA'){return acc+1}; \n        return 0 < mileage.rdm[0] ? acc+1 : acc;\n    }, 0);\n}\n\n/*\nfunction getLimit(carrier, bookingClass){\n    if(['AC','OS','SN'].includes(carrier)) {\n        if(['C','D','J', 'Z', 'P'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['A3'].includes(carrier)) {\n        if(['C','D', 'Z', 'A'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['CA'].includes(carrier)) {\n        if(['F','A','J', 'C', 'D', 'Z', 'R'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['EN'].includes(carrier)) {\n        if(['F', 'A', 'C','D','J', 'Z', 'P', 'Y', 'B', 'M'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['NZ'].includes(carrier)) {\n        if(['C','D','J', 'Z'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['NH','LH','LX'].includes(carrier)){\n        if(['C','D','J', 'Z', 'P', 'F', 'A'].includes(bookingClass)){\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['AD'].includes(carrier)) {\n        if(['C','D','J', 'I'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['EW'].includes(carrier)) {\n        if(['D','J'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['CM'].includes(carrier)) {\n        if(['C','D','J', 'R'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['LO'].includes(carrier)) {\n        if(['C','D','Z', 'F'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['OZ', 'SQ'].includes(carrier)) {\n        if(['F','A','J', 'C', 'D','Z', 'U'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['OU'].includes(carrier)) {\n        if(['C','D','Z'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['MS', 'TG'].includes(carrier)) {\n        if(['F','A','P', 'C', 'D', 'J', 'Z'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['SK', 'TP'].includes(carrier)) {\n        if(['C','D','J', 'Z'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['AI'].includes(carrier)) {\n        if(['C','D','J', 'Z', 'F', 'A'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['AV'].includes(carrier)) {\n        if(['C','D','J', 'K', 'A'].includes(bookingClass)) {\n            return 1500;\n        }else{\n            return 750;\n        }\n    }\n    if(['ET', 'BR'].includes(carrier)) {\n        if(['C','D','J'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['ZH'].includes(carrier)) {\n        if(['C','D','J', 'R', 'Z'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['TK'].includes(carrier)) {\n        if(['C','D','J', 'Z', 'K'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['SA'].includes(carrier)) {\n        if(['C','D','J', 'P', 'Z'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    if(['OA'].includes(carrier)) {\n        if(['C','D','Z', 'A'].includes(bookingClass)) {\n            return 1000;\n        }else{\n            return 500;\n        }\n    }\n    }\n\n*/\n/*\nexport function calculateMiles(segments, data) {\n    console.log('data');\n    console.log(data);\n    // Berechnet Statuspunkte. Bei UA -> 0, da Umsatzbasiert.\n    // Bei Partnerairlines -> Meilen / 5 -  mit 1500/750 Limit je nach Klasse\n    // Bei anderen Airlines -> Meilen / 6 - mit 750/500 Limit je nach Klasse\n    return data.reduce((acc,itinerary) => {\n\n        let mileage = itinerary.value?.totals?.find(item => 'UA' === item.id);\n    \n        if(!mileage) {\n          return [acc[0], acc[1]+1];\n        }\n        //let limit = getLimit(segments[acc[1]].carrier, segments[acc[1]].bookingClass);\n        if(segments[acc[1]].carrier  && segments[acc[1]].ticketer){\n        if(['UA'].includes(segments[acc[1]].carrier) || ['UA'].includes(segments[acc[1]].ticketer)) {\n            return [acc[0] + segments[acc[1]].price, acc[1]+1];\n        }\n        }\n        if(['AC','CA','EN','NZ','NH','OZ', 'AV','AD', 'SN','CM', 'WK','EW','LH','LX'].includes(segments[acc[1]].carrier)) {\n                return acc[0] + parseInt((mileage.rdm[0] / 5)), acc[1]+1];\n        }\n        else if(['UA'].includes(segments[acc[1]].carrier)) {\n            return [acc[0] + 0, acc[1]+1];\n        }\n        else {\n                return [acc[0] + parseInt(mileage.rdm[0] / 6), acc[1]+1];   \n        }\n        }, [0, 0])[0];\n}\n*/\n\nexport default {\n    name: 'United MileagePlus',\n    alliance: 'Star Alliance',\n    qualificationPeriodType: 'Calendar Year',\n    status: [\n        {\n            name: 'Premier Silver',\n            allianceStatus: 'Star Alliance Silver',\n            qualification: [\n                {\n                    type: 'miles',\n                    number: 3500,\n                    //calculate: calculateMiles,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    qualificationPeriod: 12,\n                    validity: 12,\n                },\n                {\n                    type: 'miles',\n                    number: 3000,\n                    //calculate: calculateMiles,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    secType: 'segments',\n                    secNumber: 8,\n                    secCalculate: calculateSegments,\n                    qualificationPeriod: 12,\n                    secmilesName: {\n                        en: 'Segments (PQFs)',\n                        de: 'Segmenten (PQF)',\n                    },\n                    validity: 12,\n                    secNote: {\n                        en: 'Segments in Basic Economy do not count',\n                        de: 'Für Transatlantikflüge im Light-Tarif (ohne Gepäck) und die United Basic Economy werden keine Segmente gutgeschrieben',\n                        es: '',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'Premier Gold',\n            allianceStatus: 'Star Alliance Gold',\n            qualification: [\n                {\n                    type: 'miles',\n                    number: 7000,\n                    //calculate: calculateMiles,\n                    qualificationPeriod: 12,\n                    validity: 12,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    note: {\n                        en: '',\n                        de: '',\n                        es: '',\n                    },\n                },\n                {\n                    type: 'miles',\n                    number: 6000,\n                    //calculate: calculateMiles,\n                    secType: 'segments',\n                    secNumber: 16,\n                    secCalculate: calculateSegments,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    qualificationPeriod: 12,\n                    validity: 12,\n                    secmilesName: {\n                        en: 'Segments (PQFs)',\n                        de: 'Segmenten (PQF)',\n                    },\n                    secNote: {\n                        en: 'Segments in Basic Economy do not count',\n                        de: 'Für Transatlantikflüge im Light-Tarif (ohne Gepäck) und die United Basic Economy werden keine Segmente gutgeschrieben',\n                        es: '',\n                    },\n                },\n            ],\n            note: {\n                en: '',\n                de: '',\n                es: '',\n            },\n        },\n        {\n            name: 'Premier Platinum',\n            allianceStatus: 'Star Alliance Gold',\n            qualification: [\n                {\n                    type: 'miles',\n                    number: 10000,\n                    //calculate: calculateMiles,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    qualificationPeriod: 12,\n                    validity: 12,\n                    note: {\n                        en: '',\n                        de: '',\n                        es: '',\n                    },\n                },\n                {\n                    type: 'miles',\n                    number: 9000,\n                    //calculate: calculateMiles,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    secType: 'segments',\n                    secNumber: 24,\n                    secCalculate: calculateSegments,\n                    secmilesName: {\n                        en: 'Segments (PQFs)',\n                        de: 'Segmenten (PQF)',\n                    },\n                    qualificationPeriod: 12,\n                    validity: 12,\n                    secNote: {\n                        en: 'Segments in Basic Economy do not count',\n                        de: 'Für Transatlantikflüge im Light-Tarif (ohne Gepäck) und die United Basic Economy werden keine Segmente gutgeschrieben ',\n                        es: '',\n                    },\n                },\n            ],\n            note: {\n                en: '',\n                de: '',\n                es: '',\n            },\n        },\n        {\n            name: 'Premier 1K',\n            allianceStatus: 'Star Alliance Gold',\n            qualification: [\n                {\n                    type: 'miles',\n                    number: 15000,\n                    //calculate: calculateMiles,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    qualificationPeriod: 12,\n                    validity: 12,\n                    note: {\n                        en: '',\n                        de: '',\n                        es: '',\n                    },\n                },\n                {\n                    type: 'miles',\n                    number: 13500,\n                    //calculate: calculateMiles,\n                    milesName: {\n                        en: 'points (PQPs)',\n                        de: 'Punkten (PQP)',\n                    },\n                    secType: 'segments',\n                    secNumber: 36,\n                    secCalculate: calculateSegments,\n                    qualificationPeriod: 12,\n                    secmilesName: {\n                        en: 'Segments (PQFs)',\n                        de: 'Segmenten (PQF)',\n                    },\n                    validity: 12,\n                    secNote: {\n                        en: 'Segments in Basic Economy do not count',\n                        de: 'Für Transatlantikflüge im Light-Tarif (ohne Gepäck) und die United Basic Economy werden keine Segmente gutgeschrieben',\n                        es: '',\n                    },\n                },\n            ],\n            note: {\n                en: '',\n                de: '',\n                es: '',\n            },\n        },\n    ],\n    note: {\n        en: 'If you do not enter the ticketing carrier and the flight price, this calculation only works for flights that are not issued & operated by UA. At least 4 United Segments required to obtain a status',\n        de: 'Sofern Sie nicht den Ticketing-Carrier und den Flugpreis angeben, stimmt diese Berechnung nur wenn die Flüge weder von UA ausgestellt noch ausgeführt werden. 4 United-Segmente benötigt um einen Status zu bekommen.',\n        es: '',\n    },\n};"]}