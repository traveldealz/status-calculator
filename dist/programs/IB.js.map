{"version":3,"sources":["src/programs/DL.js"],"names":["countSegments","segments","data","reduce","acc","itinerary","mileage","value","totals","find","item","id","rdm","calculateSegments","segment","includes","carrier","length","name","alliance","qualificationPeriodType","status","allianceStatus","qualification","type","number","qualificationPeriod","validity","milesName","en","de","secType","secNumber","secCalculate","secmilesName","secNote","es","calculate","note"],"mappings":"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","sourceRoot":"/source_map/","sourcesContent":["function calculateSegments(segments) {\n    return segments.filter(segment => ['IB'].includes(segment.carrier)).length;\n}\n\nfunction countSegments( segments, data ) {\n  return data.reduce((acc,itinerary) => {\n    let mileage = itinerary.value?.totals?.find(item => 'IB' === item.id);\n    if(!mileage) {\n      return acc;\n    }\n   if(mileage.rdm){\n    return 0 < mileage.rdm[0] ? acc+1 : acc;}else{return acc;}\n  }, 0);\n}\n\nexport default {\n    name: 'Iberia Plus',\n    alliance: 'Oneworld',\n    qualificationPeriodType: 'April 1 - March 31',\n    status: [\n        {\n            name: 'Plata',\n            allianceStatus: 'Oneworld Ruby',\n            qualification: [\n                {\n                    type: 'miles',\n                    number: 1100,\n                    qualificationPeriod: 12,\n                    validity: 12,\n                    milesName: {\n                        en: 'Elite Points',\n                        de: 'Elite Points',\n                    },\n                },\n                {\n                    type: 'segments',\n                    number: 25,\n                    qualificationPeriod: 12,\n                    calculate: countSegments,\n                    validity: 12,\n                    secType: 'segments',\n                    secNumber: 1,\n                    secCalculate: calculateSegments,\n                    secmilesName: {\n                        en: 'Segments with Iberia',\n                        de: 'Segmenten mit Iberia',\n                    },\n                }\n            ]\n        },\n        {\n            name: 'Oro',\n            allianceStatus: 'Oneworld Sapphire',\n            qualification: [\n                {\n                    type: 'miles',\n                    number: 2250,\n                    qualificationPeriod: 12,\n                    validity: 12,\n                    milesName: {\n                        en: 'Elite Points',\n                        de: 'Elite Points',\n                    },\n                },\n                {\n                    type: 'segments',\n                    number: 50,\n                    qualificationPeriod: 12,\n                    calculate: countSegments,\n                    validity: 12,\n                    secType: 'segments',\n                    secNumber: 1,\n                    secCalculate: calculateSegments,\n                    secmilesName: {\n                        en: 'Segments with Iberia',\n                        de: 'Segmenten mit Iberia',\n                    },\n                }\n            ]\n        },\n        {\n            name: 'Platino',\n            allianceStatus: 'Oneworld Emerald',\n            qualification: [\n                {\n                    type: 'miles',\n                    number: 12500,\n                    qualificationPeriod: 24,\n                    validity: 24,\n                    milesName: {\n                        en: 'Elite Points',\n                        de: 'Elite Points',\n                    },\n                },\n            ]\n        },\n    ],\n    note: {\n        en: '',\n        de: '',\n        es: '',\n    },\n\n};"]}